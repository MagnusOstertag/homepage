{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Simulation Software Engineering Lecture and exercise in winter term 21/22 Please take notice of and adhere to the Corona rules . We plan to have on-site lectures and exercises. Please contact us if you cannot join on-site, but only online. Welcome to the homepage of the course \"Simulation Software Engineeering\" at the University of Stuttgart. You find general information about the course under course information and in the video below. More details on the course content and the place and time . If you have any questions or suggestions, please contact the instructors .","title":"Simulation Software Engineering"},{"location":"#simulation-software-engineering","text":"Lecture and exercise in winter term 21/22 Please take notice of and adhere to the Corona rules . We plan to have on-site lectures and exercises. Please contact us if you cannot join on-site, but only online. Welcome to the homepage of the course \"Simulation Software Engineeering\" at the University of Stuttgart. You find general information about the course under course information and in the video below. More details on the course content and the place and time . If you have any questions or suggestions, please contact the instructors .","title":"Simulation Software Engineering"},{"location":"corona-rules/","text":"Let us try to all work together to make this as smooth as possible. We need to check everybody's 3G status and registration for contact tracing Use hardware cactUS reader for both when entering the room (each session) The lecture has below 35 students --> Lecturers need to check --> Please do not enter the room before the lecturers are there (15 mins before session) Please act accordingly (e.g. fill out paper registration if needed or get tested if needed) Check out after lecture Everybody in audience needs to wear an FFP2 mask Keep distance, but please do not spread equally over the large room University of Stuttgart Corona Newsticker","title":"Corona rules"},{"location":"course-content/","text":"Lecture and lab assignments The lecture and the accompanying lab assignments are organized in 7 chapters. 1. Organization and Introduction to RSE Lecture, lab organization, and the challenge What is research software engineering and what is special about it? Why do we need research software engineering? 2. Version Control Refresh and organize students' existing knowledge on git (learn how to learn more). Students can explain difference between merge and rebase and when to use what. How to use git workflows to organize research software development in a team. Get to know a few useful GitHub/GitLab standards and a few helpful tools. 3. Virtualization and Containerization What is the difference between virtualization and containers? When to use virtual machines and when containers. How to work with virtual machines (VirtualBox) and how to manage these with Vagrant. Building containers with Docker and Singularity. Understand pros and cons of different container technologies. Student can set up their own containers tailored to their requirements. 4. Building and Packaging Comprehending the necessity to package code Using package managers to package code and upload to a remote managing platform What package managers do exist for high-performance computing applications? How to easily add your code to package managers for reproducibility. How to create reproducible builds or environments? 5. Documentation Understand what you want to document and that there are different aspects (code, development, API, usage). The students can choose the right tool for the documentation needs. The students know common documentation tools for C++ and Python. The students know fundamentals of technical writing. Students understand the importance of documentation for themselves and others. 6. Testing and Continuous Integration What type of test to use for what use case. Why are tests important? The students learn how to automate tests using GitHub and GitLab. The students have an overview over different testing frameworks. 7. Legal, Archiving, Community, and More Understand why it is important to add a license to one's code. Which license to pick for your code. Importance of long term storage/availability of data and ow to make it available. Data and metadata documentation using DataVerse ( DaRUS ). Importance of reproducibility of research. How to build and interact with users to build a community. The challenge Parallel to the weekly lab work, you work on an individual challenge, where you apply the learned concepts and tools with the ultimate goal to contribute to a large-scale community simulation software package. The challenge is structured in three parts, whereas each part is completed by a short presentation of the intermediate results in class: You get acquainted with the basic functionality of a large-scale simulation software package (such as FEniCS, PETSc, TRILINOS, DuMuX, preCICE, or SU2) by studying tutorials and documentation (first quarter of the course) You analyze the RSE infrastructure and the development cycle of the software package (second quarter of the course). You contribute to the software package. The contribution can be small, but should not be trivial. Possible examples: Adding a new tutorial, extending the documentation, working on a \"good first issue\", adding support of a new package manager. Important is to properly go through all development steps if possible (contact community, open issue, open pull request, test, review, merge). The weekly lab work and assignments are an important part of the course. There will be no written or oral exam at the end of the lecture. Instead, you are evaluated continuously based on the lab work and the challenge.","title":"Course content"},{"location":"course-content/#lecture-and-lab-assignments","text":"The lecture and the accompanying lab assignments are organized in 7 chapters.","title":"Lecture and lab assignments"},{"location":"course-content/#1-organization-and-introduction-to-rse","text":"Lecture, lab organization, and the challenge What is research software engineering and what is special about it? Why do we need research software engineering?","title":"1. Organization and Introduction to RSE"},{"location":"course-content/#2-version-control","text":"Refresh and organize students' existing knowledge on git (learn how to learn more). Students can explain difference between merge and rebase and when to use what. How to use git workflows to organize research software development in a team. Get to know a few useful GitHub/GitLab standards and a few helpful tools.","title":"2. Version Control"},{"location":"course-content/#3-virtualization-and-containerization","text":"What is the difference between virtualization and containers? When to use virtual machines and when containers. How to work with virtual machines (VirtualBox) and how to manage these with Vagrant. Building containers with Docker and Singularity. Understand pros and cons of different container technologies. Student can set up their own containers tailored to their requirements.","title":"3. Virtualization and Containerization"},{"location":"course-content/#4-building-and-packaging","text":"Comprehending the necessity to package code Using package managers to package code and upload to a remote managing platform What package managers do exist for high-performance computing applications? How to easily add your code to package managers for reproducibility. How to create reproducible builds or environments?","title":"4. Building and Packaging"},{"location":"course-content/#5-documentation","text":"Understand what you want to document and that there are different aspects (code, development, API, usage). The students can choose the right tool for the documentation needs. The students know common documentation tools for C++ and Python. The students know fundamentals of technical writing. Students understand the importance of documentation for themselves and others.","title":"5. Documentation"},{"location":"course-content/#6-testing-and-continuous-integration","text":"What type of test to use for what use case. Why are tests important? The students learn how to automate tests using GitHub and GitLab. The students have an overview over different testing frameworks.","title":"6. Testing and Continuous Integration"},{"location":"course-content/#7-legal-archiving-community-and-more","text":"Understand why it is important to add a license to one's code. Which license to pick for your code. Importance of long term storage/availability of data and ow to make it available. Data and metadata documentation using DataVerse ( DaRUS ). Importance of reproducibility of research. How to build and interact with users to build a community.","title":"7. Legal, Archiving, Community, and More"},{"location":"course-content/#the-challenge","text":"Parallel to the weekly lab work, you work on an individual challenge, where you apply the learned concepts and tools with the ultimate goal to contribute to a large-scale community simulation software package. The challenge is structured in three parts, whereas each part is completed by a short presentation of the intermediate results in class: You get acquainted with the basic functionality of a large-scale simulation software package (such as FEniCS, PETSc, TRILINOS, DuMuX, preCICE, or SU2) by studying tutorials and documentation (first quarter of the course) You analyze the RSE infrastructure and the development cycle of the software package (second quarter of the course). You contribute to the software package. The contribution can be small, but should not be trivial. Possible examples: Adding a new tutorial, extending the documentation, working on a \"good first issue\", adding support of a new package manager. Important is to properly go through all development steps if possible (contact community, open issue, open pull request, test, review, merge). The weekly lab work and assignments are an important part of the course. There will be no written or oral exam at the end of the lecture. Instead, you are evaluated continuously based on the lab work and the challenge.","title":"The challenge"},{"location":"course-information/","text":"Research Software Engineering Software is an integral part of nowadays research. A UK survey in 2014 found that 7 out of 10 researchers could not conduct research without software. However, research software engineering (RSE) does not yet get the necessary attention in research and in teaching. All this applies to simulation software in particular. Read more: Association of German Research Software Engineers: de-RSE Position paper of de-RSE Idea of the course The course is about simulation software. More precisely, we discuss the software tools used to ensure good software engineering for open-source simulation software such as FEniCS, PETSc, TRILINOS, DuMuX, preCICE, or SU2. This is not a course focused on programming and programming paradigms, but on the techniques and the corresponding tools. Some examples are version control (Git, GitHub, GitLab), virtualization/containerization (Docker), continuous integration (GitHub Actions, GitLab CI), or documentation (Jekyll, mkdocs, sphinx). We study these concepts and tools in lectures and (almost) weekly lab assignments. In parallel, you work on an individual challenge, where you apply the learned concepts and tools with the ultimate goal to contribute to a large-scale community simulation software package. Read more on the course content . Target audience This course is aimed at master-level students from Computer Science, Simulation Technology and related fields, but is also open to PhD students or anyone else interested. We expect you to have some knowledge in software development, basic tools and programming. However, we also give you extra information or point to additional resources if you have the feeling you need to catch up with some topic. An example : In the lecture, we shortly touch on Git You are a Git expert? This is great. We try not to bore you. You have used Git before, but you basically use the same 5 commands all the time? This is fine and a good foundation to start. You had heard about Git some time in a lecture, but you have never used it? You are good to go with the examples in the lectures and the references presented there, but you probably have to catch up a bit. Resources All teaching resources are available (open-source) on GitHub and through this homepage. We encourage you to help us extend these resources and fix mistakes. Exam The course has a so-called \"course accompanying examination\" . This means, there will be no single exam. Instead, we evaluate the students' performance on the individual challenge, on the weekly exercises, and on the overall engagement. Still, wou will have to register for the \"exam\" on campus. Point of no return : Once you gave the first presentation (Nov 11), you have to register. Additional information for SimTech students You might also be interested in the course Sustainable Development of Simulation Software by Bernd Flemisch and Dennis Gl\u00e4ser, which is starting in summer term 2022. Their course has a stronger focus on software engineering patterns and project work in C++ for simulation software. Our course Simulation Software Engineering focuses more on the tools commonly used in the development of simulation software. The course of Flemisch/Gl\u00e4ser is not a prerequisite to follow our course on simulation software engineering and neither vice versa. We encourage you, however, to follow both courses if you are interested in the topic.","title":"Course information"},{"location":"course-information/#research-software-engineering","text":"Software is an integral part of nowadays research. A UK survey in 2014 found that 7 out of 10 researchers could not conduct research without software. However, research software engineering (RSE) does not yet get the necessary attention in research and in teaching. All this applies to simulation software in particular. Read more: Association of German Research Software Engineers: de-RSE Position paper of de-RSE","title":"Research Software Engineering"},{"location":"course-information/#idea-of-the-course","text":"The course is about simulation software. More precisely, we discuss the software tools used to ensure good software engineering for open-source simulation software such as FEniCS, PETSc, TRILINOS, DuMuX, preCICE, or SU2. This is not a course focused on programming and programming paradigms, but on the techniques and the corresponding tools. Some examples are version control (Git, GitHub, GitLab), virtualization/containerization (Docker), continuous integration (GitHub Actions, GitLab CI), or documentation (Jekyll, mkdocs, sphinx). We study these concepts and tools in lectures and (almost) weekly lab assignments. In parallel, you work on an individual challenge, where you apply the learned concepts and tools with the ultimate goal to contribute to a large-scale community simulation software package. Read more on the course content .","title":"Idea of the course"},{"location":"course-information/#target-audience","text":"This course is aimed at master-level students from Computer Science, Simulation Technology and related fields, but is also open to PhD students or anyone else interested. We expect you to have some knowledge in software development, basic tools and programming. However, we also give you extra information or point to additional resources if you have the feeling you need to catch up with some topic. An example : In the lecture, we shortly touch on Git You are a Git expert? This is great. We try not to bore you. You have used Git before, but you basically use the same 5 commands all the time? This is fine and a good foundation to start. You had heard about Git some time in a lecture, but you have never used it? You are good to go with the examples in the lectures and the references presented there, but you probably have to catch up a bit.","title":"Target audience"},{"location":"course-information/#resources","text":"All teaching resources are available (open-source) on GitHub and through this homepage. We encourage you to help us extend these resources and fix mistakes.","title":"Resources"},{"location":"course-information/#exam","text":"The course has a so-called \"course accompanying examination\" . This means, there will be no single exam. Instead, we evaluate the students' performance on the individual challenge, on the weekly exercises, and on the overall engagement. Still, wou will have to register for the \"exam\" on campus. Point of no return : Once you gave the first presentation (Nov 11), you have to register.","title":"Exam"},{"location":"course-information/#additional-information-for-simtech-students","text":"You might also be interested in the course Sustainable Development of Simulation Software by Bernd Flemisch and Dennis Gl\u00e4ser, which is starting in summer term 2022. Their course has a stronger focus on software engineering patterns and project work in C++ for simulation software. Our course Simulation Software Engineering focuses more on the tools commonly used in the development of simulation software. The course of Flemisch/Gl\u00e4ser is not a prerequisite to follow our course on simulation software engineering and neither vice versa. We encourage you, however, to follow both courses if you are interested in the topic.","title":"Additional information for SimTech students"},{"location":"place-and-time/","text":"Lecture hall All sessions take place in 38.04 , Universit\u00e4tsstr. 38, ground floor. We plan to do the complete course on site . As the course is heavy on interactive labs, a hybrid mode seems not very suitable. Please contact us if you can only join online nonetheless. If needed, we will find a solution. Time Lectures and lab work are both on Thursdays: 09:45\u201311:15 15:45\u201317:15 There is not strict distinction between both slots. It depends on the topic and the week. Normally, we do a more lecture-style session in the morning and a more lab-style session in the afternoon. Time table Please note that we might adjust the time table during the semester. You find a more detailed version on GitHub . Week Date Type Chapter Topic Lecturer 1.1 21.10. Lecture 1-2 course planning , intro to RSE , VC basics , Git basics Benjamin 1.2 21.10. Lecture 2 Git: my workflow + quiz , challenge intro Benjamin 2.1 28.10. Lecture + presentations 2 my neat little Git trick , merge vs. rebase , working in teams , GitHub standards Benjamin 2.2 28.10. Lab 2 Git cheat sheet Benjamin 3.1 04.11. Lecture 3 Organizational things , Intro to VMs and containers , Intro VMs , VirtualBox , Vagrant , Intro containers Alexander 3.2 04.11. Lecture 3 Docker quiz , Docker , Singularity Alexander 4.1 11.11. Lab 3 VirtualBox, Vagrant, Docker, Singularity Alexander 4.2 11.11. Presentations C 1st student presentations students 5.1 18.11. Lecture 4 Introduction to Packaging , Packaging Python Code (setup.py, pip, conda) Ishaan 5.2 18.11. Lab 4 Packaging Python Code Exercise Ishaan 6.1 25.11. Lecture 4 System Paths, Libraries, and How to Use Them , Make , CMake Alexander and Benjamin 6.2 25.11. Lab 4 Let's fight with CMake, Docker, and some dependencies Benjamin 7.1 02.12. Lecture 4 tbd. 7.2 02.12. Lab 4 tbd. 8.1 09.12. Lecture 5 documentation tools Alexander 8.2 09.12. Lab 5 tbd. 9.1 16.12. Lecture 5 Technical writing Benjamin 9.2 16.12. Presentations C 2nd student presentations students 10.1 13.01. Lecture 6 tbd. 10.2 13.01. Lab 6 tbd. 11.1 20.01. Lecture 6 tbd. 11.2 20.01. Lab 6 tbd. 12.1 27.01. Lecture 7 tbd. 12.2 27.01. Lab 7 tbd. 13.1 03.02. Lecture 7 tbd. 13.2 03.02. Lecture 7 tbd. 14.1 10.02. Presentations C final student presentations students 14.2 10.02. Presentations C final student presentations students","title":"Place and time"},{"location":"place-and-time/#lecture-hall","text":"All sessions take place in 38.04 , Universit\u00e4tsstr. 38, ground floor. We plan to do the complete course on site . As the course is heavy on interactive labs, a hybrid mode seems not very suitable. Please contact us if you can only join online nonetheless. If needed, we will find a solution.","title":"Lecture hall"},{"location":"place-and-time/#time","text":"Lectures and lab work are both on Thursdays: 09:45\u201311:15 15:45\u201317:15 There is not strict distinction between both slots. It depends on the topic and the week. Normally, we do a more lecture-style session in the morning and a more lab-style session in the afternoon.","title":"Time"},{"location":"place-and-time/#time-table","text":"Please note that we might adjust the time table during the semester. You find a more detailed version on GitHub . Week Date Type Chapter Topic Lecturer 1.1 21.10. Lecture 1-2 course planning , intro to RSE , VC basics , Git basics Benjamin 1.2 21.10. Lecture 2 Git: my workflow + quiz , challenge intro Benjamin 2.1 28.10. Lecture + presentations 2 my neat little Git trick , merge vs. rebase , working in teams , GitHub standards Benjamin 2.2 28.10. Lab 2 Git cheat sheet Benjamin 3.1 04.11. Lecture 3 Organizational things , Intro to VMs and containers , Intro VMs , VirtualBox , Vagrant , Intro containers Alexander 3.2 04.11. Lecture 3 Docker quiz , Docker , Singularity Alexander 4.1 11.11. Lab 3 VirtualBox, Vagrant, Docker, Singularity Alexander 4.2 11.11. Presentations C 1st student presentations students 5.1 18.11. Lecture 4 Introduction to Packaging , Packaging Python Code (setup.py, pip, conda) Ishaan 5.2 18.11. Lab 4 Packaging Python Code Exercise Ishaan 6.1 25.11. Lecture 4 System Paths, Libraries, and How to Use Them , Make , CMake Alexander and Benjamin 6.2 25.11. Lab 4 Let's fight with CMake, Docker, and some dependencies Benjamin 7.1 02.12. Lecture 4 tbd. 7.2 02.12. Lab 4 tbd. 8.1 09.12. Lecture 5 documentation tools Alexander 8.2 09.12. Lab 5 tbd. 9.1 16.12. Lecture 5 Technical writing Benjamin 9.2 16.12. Presentations C 2nd student presentations students 10.1 13.01. Lecture 6 tbd. 10.2 13.01. Lab 6 tbd. 11.1 20.01. Lecture 6 tbd. 11.2 20.01. Lab 6 tbd. 12.1 27.01. Lecture 7 tbd. 12.2 27.01. Lab 7 tbd. 13.1 03.02. Lecture 7 tbd. 13.2 03.02. Lecture 7 tbd. 14.1 10.02. Presentations C final student presentations students 14.2 10.02. Presentations C final student presentations students","title":"Time table"},{"location":"staff/","text":"Staff/contact Lecturers Name Institute Contact Alexander Jaust , Github Simulation of Large Systems alexander.jaust@ipvs.uni-stuttgart.de Benjamin Uekermann , GitHub Usability and Sustainability of Simulation Software benjamin.uekermann@ipvs.uni-stuttgart.de Teaching assistant Name Institute Contact Ishaan Desai , GitHub Usability and Sustainability of Simulation Software ishaan.desai@ipvs.uni-stuttgart.de","title":"Staff/Contact"},{"location":"staff/#staffcontact","text":"","title":"Staff/contact"},{"location":"staff/#lecturers","text":"Name Institute Contact Alexander Jaust , Github Simulation of Large Systems alexander.jaust@ipvs.uni-stuttgart.de Benjamin Uekermann , GitHub Usability and Sustainability of Simulation Software benjamin.uekermann@ipvs.uni-stuttgart.de","title":"Lecturers"},{"location":"staff/#teaching-assistant","text":"Name Institute Contact Ishaan Desai , GitHub Usability and Sustainability of Simulation Software ishaan.desai@ipvs.uni-stuttgart.de","title":"Teaching assistant"}]}